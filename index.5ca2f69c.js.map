{"mappings":"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","sources":["case1001b/src/cubemap-static.js"],"sourcesContent":["// Copyright (c) 2021 8th Wall, Inc.\n/* globals AFRAME THREE */\n\n/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nconst ensureMaterialArray = (material) => {\n  if (!material) {\n    return []\n  } else if (Array.isArray(material)) {\n    return material\n  } else if (material.materials) {\n    return material.materials\n  } else {\n    return [material]\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nconst applyEnvMap = (mesh, materialNames, envMap, reflectivity) => {\n  if (!mesh) {\n    return\n  }\n\n  materialNames = materialNames || []\n\n  mesh.traverse((node) => {\n    if (!node.isMesh) {\n      return\n    }\n    const meshMaterials = ensureMaterialArray(node.material)\n    meshMaterials.forEach((material) => {\n      if (material && !('envMap' in material)) {\n        return\n      }\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) {\n        return\n      }\n      material.envMap = envMap\n      material.reflectivity = reflectivity\n      material.needsUpdate = true\n    })\n  })\n}\n\nconst toUrl = (urlOrId) => {\n  const img = document.querySelector(urlOrId)\n  return img ? img.src : urlOrId\n}\n\nAFRAME.registerComponent('cubemap-static', {\n  multiple: true,\n  schema: {\n    posx: {default: '#posx'},\n    posy: {default: '#posy'},\n    posz: {default: '#posz'},\n    negx: {default: '#negx'},\n    negy: {default: '#negy'},\n    negz: {default: '#negz'},\n    extension: {default: 'jpg', oneOf: ['jpg', 'png']},\n    format: {default: 'RGBFormat', oneOf: ['RGBFormat', 'RGBAFormat']},\n    enableBackground: {default: false},\n    reflectivity: {default: 1, min: 0, max: 1},\n    materials: {default: []},\n  },\n\n  init() {\n    const {data} = this\n\n    this.texture = new THREE.CubeTextureLoader().load([\n      toUrl(data.posx), toUrl(data.negx),\n      toUrl(data.posy), toUrl(data.negy),\n      toUrl(data.posz), toUrl(data.negz),\n    ])\n\n    this.texture.format = THREE[data.format]\n\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh')\n      const {data} = this\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity)\n    }\n    this.el.addEventListener('object3dset', this.object3dsetHandler)\n  },\n  update(oldData) {\n    const {data} = this\n    const mesh = this.el.getObject3D('mesh')\n\n    let addedMaterialNames = []\n    let removedMaterialNames = []\n\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter(name => !oldData.materials.includes(name))\n        removedMaterialNames = oldData.materials.filter(name => !data.materials.includes(name))\n      } else {\n        addedMaterialNames = data.materials\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity)\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1)\n    }\n\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames =\n        data.materials.filter(name => oldData.materials.includes(name))\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity)\n      }\n    }\n\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture)\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null)\n    }\n  },\n  remove() {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler)\n    applyEnvMap(this.el.getObject3D('mesh'), this.data.materials, null, 1)\n    if (this.data.enableBackground) {\n      this.setBackground(null)\n    }\n  },\n  setBackground(texture) {\n    this.el.sceneEl.object3D.background = texture\n  },\n})\n"],"names":[],"version":3,"file":"index.5ca2f69c.js.map","sourceRoot":"/__parcel_source_root/"}